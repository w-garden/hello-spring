<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security
http://www.springframework.org/schema/security/spring-security.xsd
http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd">

    <bean id="customAccessDenied" class="net.daum.security.CustomAccessDeniedHandler" />
    <!--  CustomAccessDeniedHandler 클래스의 빈아이디 객체 customAccessDenied 생성. 위의 문장을 자바 코드로 표현하면
     CustomAccessDeniedHandler customAccessDenied = new CustomAccessDeniedHandler();와 같은 기능이다. bean 단위가
     자바에서는 하나의 클래스 단위이다.-->
     
     <bean id="customLoginSuccess" class="net.daum.security.CustomLoginSuccessHandler" />
     <!-- 로그인 성공시 실행됨. -->
     
     <!--<bean id="customPasswordEncoder" class="net.daum.security.CustomNoOpPasswordEncoder" />
      customPasswordEncoder 빈아이디 객체를 생성 -->
      
      <bean id="bcryptPasswordEncoder"
         class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
         <!-- 
             1. 스프링 시큐리티에서 제공되는 BCryptPasswordEncoder 클래스를 이용해서 패스워드를 암호화 처리한다.
             2. bcrypt는 패스워드를 저장하는 용도로 설계된 것으로 특정 문자열을 암호화 시킨다.체크하는 쪽에서는 암호화 된 패스워드인지만 확인하고 다시
             원래 암호 원문으로 되돌리지는 못한다.(복호화인 디코드가 안된다.)
             3. BCryptPasswordEncoder는 스프링 시큐리티 API안에 포함되어 있다.
          -->
    <bean id ="customUserDetailsService" class="net.daum.security.CustomUserDetailService"/>
	<security:http> <!-- 스프링 시큐리티가 http에서 알수 있게 하는 시작 지점 설정 -->
	
	    
	   <security:intercept-url pattern="/sample/all" access="permitAll" />
	   <!-- pattern속성값에 지정한 매핑주소에 접근할 때 스프링의 시큐리티 인터셉터를 이용해서 데이터를 가로챈 다음 accee속성에 지정한 권한 범위를 체크한다.
	   권한범위가 permitAll이기 때문에 모든 사용자를 허용한다. -->
	   
	   <security:intercept-url pattern="/sample/member" access="hasRole('ROLE_MEMBER')" />
	   <!--  access속성에 설정한 ROLE_MEMBER 권한범위는 로그인 한 사용자만 접근가능하다. -->
	   
	   <security:intercept-url pattern="/sample/admin" access="hasRole('ROLE_ADMIN')" />
	   <!-- 로그인 한 사용자중에서 관리자 권한을 가진 사용자만이 접근할 수 있다. -->
	    
	   <!--<security:access-denied-handler error-page="/accessError" />
	    403접근 금지 에러가 발생했을 때  accessError 매핑주소가 실행되게 한다. -->
	    
	    <security:access-denied-handler ref="customAccessDenied" />
	    <!-- 403 접근 금지 에러가 발생하면 빈아이디 customAccessDenied 빈아이디를 호출한다. -->
	    
	   <!-- <security:form-login />  시큐리티 폼 로그인 설정. 스프링 시큐리티 자체 폼 로그인이 실행. -->
	   
	    <security:form-login login-page="/customLogin" authentication-success-handler-ref="customLoginSuccess"/>
	    <!-- 커스텀 로그인 페이지로 이동하는 customLogin 매핑주소 등록. login-page속성으로 해당 매핑주소로 이동하는 방식은 get방식.  
	    authentication-success-handler-ref 속성은 로그인 성공시 customLoginSuccess 빈아이디를 호출.-->
	    
	    
	    <security:remember-me data-source-ref="dataSource" token-validity-seconds="604800"/>
	    <!-- remember-me는 시큐리티 자동로그인 태그, data-source-ref로 데이터베이스 연결이용, token-validity-seconds 속성은
	    쿠키유효시간(초단위) -->
	    
	    
	    
	    <security:logout logout-url="/customLogout" invalidate-session="true" delete-cookies="remember-me"/>
	    <!-- 로그아웃 실행시 customLogout매핑주소가 실행됨. invalidate-session="true" 로 설정하면 로그아웃 시 세션이 무효화,
	    delete-cookies ="remember-me" 는 자동로그인에서 사용하는 쿠키이름삭제  -->
	    
	</security:http>
	
	<security:authentication-manager> <!-- 시큐리티 인증 관리자 -->
	  <security:authentication-provider user-service-ref="customUserDetailsService"> <!-- 인증 제공자 -->
	    
	      
	      <security:password-encoder ref="bcryptPasswordEncoder" />
	      <!-- 빈아이디 bcryptPasswordEncoder를 호출하면서 비번을 암호화 -->
	      
	     
	  </security:authentication-provider>	
	</security:authentication-manager>
</beans>













